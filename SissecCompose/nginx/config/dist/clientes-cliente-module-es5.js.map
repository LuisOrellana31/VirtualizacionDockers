{"version":3,"sources":["webpack:///src/app/validator/Validaciones.ts","webpack:///src/app/clientes/cliente.module.ts","webpack:///src/app/clientes/lista-cliente/lista-cliente.component.ts","webpack:///src/app/clientes/lista-cliente/lista-cliente.component.html","webpack:///src/app/clientes/service/servicio-cliente.service.ts","webpack:///src/app/clientes/actualizar-cliente/actualizar-cliente.component.ts","webpack:///src/app/clientes/nuevo-cliente/nuevo-cliente.component.ts","webpack:///src/app/clientes/pipe/filtro-cliente.pipe.ts","webpack:///src/app/clientes/lista-cliente/lista-cliente.component.css","webpack:///src/app/clientes/cliente-routing.module.ts","webpack:///src/app/clientes/nuevo-cliente/nuevo-cliente.component.css","webpack:///src/app/clientes/actualizar-cliente/actualizar-cliente.component.html","webpack:///src/app/clientes/actualizar-cliente/actualizar-cliente.component.css","webpack:///src/app/clientes/nuevo-cliente/nuevo-cliente.component.html","webpack:///src/app/auth/guards/validar-token.guard.ts"],"names":["emailPattern","nombreApellidoPattern","validarPassword","ClienteModule","declarations","imports","ListaClienteComponent","clienteService","Clientes","buscar","listarClientes","listarCliente","subscribe","datos","cliente","valor","txtSearch","nativeElement","value","trim","length","selector","template","ServicioClienteService","http","get","ip","post","put","providedIn","ActualizarClienteComponent","router","idCliente","cedula","nombres","apellidos","telefono","direccion","correo","undefined","fire","client","actualizarCliente","data","codigo","mensaje","then","result","navigate","NuevoClienteComponent","fb","miFormulario","group","required","maxLength","verificarCedula","minLength","pattern","invalid","crearCliente","reset","campo","controls","errors","touched","emailTomado","control","tercerDigito","parseInt","substring","coefValCedula","verificador","suma","digito","i","Math","round","FiltroClientePipe","clientes","filteredUsuario","filter","toLowerCase","includes","toLocaleLowerCase","name","routes","path","children","component","redirectTo","canActivate","canLoad","ClienteRoutingModule","forChild","exports","ValidarTokenGuard","auth"],"mappings":"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","file":"clientes-cliente-module-es5.js","sourcesContent":["export const emailPattern         : string = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\";\r\nexport const nombreApellidoPattern: string = \"([a-zA-Z',.-]+( [a-zA-Z',.-]+)*){2,30}\";\r\nexport const validarPassword      : string = '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{8,}';","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\nimport { NuevoClienteComponent } from './nuevo-cliente/nuevo-cliente.component';\nimport { ClienteRoutingModule } from './cliente-routing.module';\nimport { ListaClienteComponent } from './lista-cliente/lista-cliente.component';\nimport { ActualizarClienteComponent } from './actualizar-cliente/actualizar-cliente.component';\nimport { FiltroClientePipe } from './pipe/filtro-cliente.pipe';\nimport { MaterialModule } from '../material/material.module';\nimport { RouterModule } from '@angular/router';\n\n\n@NgModule({\n  declarations: [NuevoClienteComponent, ListaClienteComponent, ActualizarClienteComponent, FiltroClientePipe],\n  imports: [\n    CommonModule,\n    ClienteRoutingModule,\n    MaterialModule,\n    RouterModule\n  ]\n})\nexport class ClienteModule { }\n","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { Cliente } from '../../garantia/model/OrdenTrabajo';\n//import { Cliente } from 'app/garantia/model/OrdenTrabajo';\nimport { ServicioClienteService } from '../service/servicio-cliente.service';\n\n@Component({\n  selector: 'app-lista-cliente',\n  templateUrl: './lista-cliente.component.html',\n  styleUrls: ['./lista-cliente.component.css']\n})\nexport class ListaClienteComponent implements OnInit {\n\n  \n  Clientes:Cliente[]=[]\n\n  public buscar: string = '';\n  @ViewChild('txtSearch') txtSearch!: ElementRef<HTMLInputElement>;\n\n\n  constructor(private clienteService:ServicioClienteService) { }\n\n  ngOnInit(): void {\n    this.listarClientes();\n  }\n\n  listarClientes(){\n    this.clienteService.listarCliente().subscribe(\n      datos => {\n       if (datos) {\n         this.Clientes=datos;\n       }\n      }\n    );\n  }\n\n  obtenerCliente(cliente:Cliente){\n    this.clienteService.cliente=cliente;\n  }\n\n  ObetnerParametroPipe() {\n\n    const valor = this.txtSearch.nativeElement.value;\n    this.buscar = valor;\n    if (valor.trim().length === 0) {\n      return;\n    }\n    this.txtSearch.nativeElement.value = '';\n  }\n\n}\n","export default \"<div class=\\\"main-content\\\">\\n\\n    <div class=\\\"container-fluid\\\">\\n\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-12\\\">\\n                <div class=\\\"card\\\">\\n\\n                    <div class=\\\"card-header card-header-danger\\\">\\n                        <h4 class=\\\"card-title \\\">Clientes</h4>\\n\\n                    </div>\\n\\n                    <div class=\\\"card-body\\\">\\n                        <div>\\n                            <a class=\\\"btn btn-success\\\" routerLink=\\\"/cliente/nuevo\\\" style=\\\"margin-right:10px\\\">\\n\\n                                Nuevo Cliente</a>\\n                            <br>\\n                            <input type=\\\"text\\\" class=\\\"form-control mb-2\\\" placeholder=\\\"Buscar por Cedula\\\"\\n                                (keyup.enter)=\\\"ObetnerParametroPipe()\\\" #txtSearch />\\n\\n                        </div>\\n\\n                        <div class=\\\"table-responsive\\\">\\n                            <table class=\\\"table\\\">\\n                                <thead class=\\\" text-primary\\\">\\n\\n                                    <th>\\n                                        Cedula\\n                                    </th>\\n                                    <th>\\n                                        Nombres\\n                                    </th>\\n                                    <th>\\n                                        Apellidos\\n                                    </th>\\n                                    <th>\\n                                        Correo\\n                                    </th>\\n                                    <th>\\n                                        Direccion\\n                                    </th>\\n                                    <th>\\n                                        Telefono\\n                                    </th>\\n\\n                                    <th>\\n                                        Accion\\n                                    </th>\\n\\n                                </thead>\\n                                <!-- filtroOrden:search -->\\n                                <tbody>\\n                                    <tr *ngFor=\\\"let item of Clientes | filtroCliente :buscar\\\">\\n                                        <td>\\n                                            {{item.cedula}}\\n\\n                                        </td>\\n\\n                                        <td>\\n                                            {{item?.nombres}}\\n\\n                                        </td>\\n                                        <td>\\n                                            {{item?.apellidos}}\\n                                        </td>\\n                                        <td>\\n                                            {{item?.correo}}\\n                                        </td>\\n                                        <td>\\n                                            {{item.direccion}}\\n                                        </td>\\n                                        <td>\\n                                            {{item?.telefono}}\\n                                        </td>\\n\\n                                        <td>\\n                                            <button routerLink=\\\"/cliente/actualizar\\\" class=\\\"btn btn-info\\\"\\n                                                (click)=\\\"obtenerCliente(item)\\\" color=\\\"primary\\\">Actualizar</button>\\n\\n                                        </td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\\n    </div>\\n</div>\";","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n//import { environment } from '../../../environments/conexion';\nimport { Cliente } from '../../garantia/model/OrdenTrabajo';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServicioClienteService {\n\n  cliente:Cliente=null;\n\n  constructor(private http:HttpClient) { }\n\n  listarCliente(){\n    return this.http.get<Cliente[]>(environment.ip+'usuario/listaCliente');\n  }\n\n  crearCliente(cliente:Cliente){\n    return this.http.post<any>(environment.ip+'usuario/guardarCliente',cliente);\n  }\n\n  actualizarCliente(cliente:Cliente){\n    return this.http.put<any>(environment.ip+'usuario/actualizarCliente',cliente);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ServicioClienteService } from '../service/servicio-cliente.service';\nimport { Cliente } from '../../garantia/model/OrdenTrabajo';\nimport Swal from 'sweetalert2';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-actualizar-cliente',\n  templateUrl: './actualizar-cliente.component.html',\n  styleUrls: ['./actualizar-cliente.component.css']\n})\nexport class ActualizarClienteComponent implements OnInit {\n\n  idCliente: number;\n  cedula: string;\n  nombres: string;\n  apellidos: string;\n  telefono: string;\n  direccion: string;\n  correo: string;\n\n  constructor(private clienteService: ServicioClienteService,\n              private router:Router) { }\n\n  ngOnInit(): void {\n\n    if (this.clienteService.cliente != null) {\n      this.idCliente = this.clienteService.cliente.idCliente;\n      this.cedula = this.clienteService.cliente.cedula;\n      this.nombres = this.clienteService.cliente.nombres;\n      this.apellidos = this.clienteService.cliente.apellidos;\n      this.telefono = this.clienteService.cliente.telefono;\n      this.direccion = this.clienteService.cliente.direccion;\n      this.correo = this.clienteService.cliente.correo;\n    }\n\n  }\n\n\n  actualizarCliente() {\n    if (this.idCliente == undefined) {\n      Swal.fire('Error', 'miki error', 'error');\n    } else {\n      const client: Cliente = {\n\n        idCliente:this.idCliente,\n        cedula:this.cedula,\n        nombres: this.nombres,\n        apellidos: this.apellidos,\n        telefono: this.telefono,\n        direccion: this.direccion,\n        correo: this.correo\n      }\n\n      this.clienteService.actualizarCliente(client).subscribe(\n        data =>{\n          if (data.codigo == 1) {\n            Swal.fire('Actualizacion Completa', data.mensaje, 'success')\n              .then(result => {\n                if (result.value) {\n                  this.router.navigate(['/cliente/listar']);\n                }\n              });\n\n          } else {\n            Swal.fire('Error', data.mensaje, 'error');\n          }\n        });\n    } \n  }\n\n\n\n}\n","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { Cliente } from '../../garantia/model/OrdenTrabajo';\nimport { ServicioClienteService } from '../service/servicio-cliente.service';\nimport Swal from 'sweetalert2';\nimport { Router } from '@angular/router';\nimport { FormControl, FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { emailPattern, nombreApellidoPattern } from '../../validator/Validaciones';\n\n@Component({\n  selector: 'app-nuevo-cliente',\n  templateUrl: './nuevo-cliente.component.html',\n  styleUrls: ['./nuevo-cliente.component.css']\n})\nexport class NuevoClienteComponent {\n\n  constructor(private clienteService: ServicioClienteService,\n              private router: Router,\n              private fb: FormBuilder) { }\n\n\n\n\n\n  miFormulario: FormGroup = this.fb.group({\n    cedula: ['', [Validators.required, Validators.maxLength(10), this.verificarCedula],],\n    nombres: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(20), Validators.pattern(nombreApellidoPattern)]],\n    apellidos: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(20), Validators.pattern(nombreApellidoPattern)]],\n    telefono: ['', [Validators.required, Validators.minLength(9), Validators.maxLength(15)]],\n    direccion: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(50)]],\n    correo: ['', [Validators.required, Validators.pattern(emailPattern)],],\n  });\n\n  crearCliente() {\n\n    if (this.miFormulario.invalid) {\n      Swal.fire('Error, Campos Vacios', 'Por favor, Llene los Campos', 'error')\n    } else {\n\n      const { cedula, nombres, apellidos, telefono, direccion, correo,  } = this.miFormulario.value;\n      const client: Cliente = {\n        cedula: cedula,\n        nombres: nombres,\n        apellidos: apellidos,\n        telefono: telefono,\n        direccion: direccion,\n        correo: correo\n      };\n\n      this.clienteService.crearCliente(client).subscribe(\n        data => {\n          if (data.codigo == 1) {\n            this.miFormulario.reset();\n            Swal.fire('Ingreso Correcto', 'Cliente Ingresado Correctamente', 'success');\n            this.router.navigate(['/cliente/listar']);\n          } else {\n            Swal.fire('Error en el Ingreso', data.mensaje, 'warning')\n          }\n        });\n    }\n\n  }\n\n\n\n\n  validarCedula(campo: string) {\n    return this.miFormulario.controls[campo].errors\n      && this.miFormulario.controls[campo].touched;\n  }\n\n\n\n  get emailErrorMsg(): string {\n    const errors = this.miFormulario.get('correo')?.errors;\n    if (errors?.required) {\n      return 'Email es obligatorio';\n    } else if (errors?.pattern) {\n      return 'El valor ingresado no tiene formato de correo';\n    } else if (errors?.emailTomado) {\n      return 'El email ya fue tomado';\n    }\n\n    return '';\n  }\n\n  campoNoValido(campo: string) {\n    return this.miFormulario.get(campo)?.invalid\n      && this.miFormulario.get(campo)?.touched;\n  }\n\n\n  cancelar() {\n   this.miFormulario.reset();\n    this.router.navigate(['/cliente/listar']);\n  }\n\n \n  verificarCedula(control: FormControl) {\n    const valor: string = control.value?.trim();\n    if (valor) {\n      let tercerDigito = parseInt(valor.substring(2, 3));\n      if (tercerDigito < 6) {\n        // El ultimo digito se lo considera dígito verificador\n        let coefValCedula = [2, 1, 2, 1, 2, 1, 2, 1, 2];\n        let verificador = parseInt(valor.substring(9, 10));\n        let suma: number = 0;\n        let digito: number = 0;\n        for (let i = 0; i < (valor.length - 1); i++) {\n          digito = parseInt(valor.substring(i, i + 1)) * coefValCedula[i];\n          suma += ((parseInt((digito % 10) + '') + (parseInt((digito / 10) + ''))));\n        }\n        suma = Math.round(suma);\n        if ((Math.round(suma % 10) == 0) && (Math.round(suma % 10) == verificador)) {\n          return null;\n\n        } else if ((10 - (Math.round(suma % 10))) == verificador) {\n          return null;\n        } else {\n          return {\n            cedula: false\n          }\n        }\n      } else {\n        return {\n          cedula: false\n        }\n      }\n    } else {\n      return {\n        cedula: false\n      }\n    }\n  }\n\n\n\n\n\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Cliente } from '../../garantia/model/OrdenTrabajo';\n\n@Pipe({\n  name: 'filtroCliente'\n})\nexport class FiltroClientePipe implements PipeTransform {\n\n  transform(clientes: Cliente[], buscar: string = ''): Cliente[] {\n    if (buscar.length === 0) {\n      return clientes;\n    }\n\n    const filteredUsuario = clientes.filter(clientes => clientes.cedula.trim().toLowerCase().includes(buscar.trim().toLocaleLowerCase()));\n    return filteredUsuario;\n    \n  \n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsaXN0YS1jbGllbnRlLmNvbXBvbmVudC5jc3MifQ== */\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ValidarTokenGuard } from '../auth/guards/validar-token.guard';\nimport { ListaClienteComponent } from './lista-cliente/lista-cliente.component';\nimport { NuevoClienteComponent } from './nuevo-cliente/nuevo-cliente.component';\nimport { ActualizarClienteComponent } from './actualizar-cliente/actualizar-cliente.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    children: [\n        { path: 'listar', component: ListaClienteComponent },\n        { path: 'nuevo', component: NuevoClienteComponent },\n        { path: 'actualizar', component: ActualizarClienteComponent },\n        { path: '**', redirectTo: 'listar' }\n    ],\n     canActivate:[ValidarTokenGuard],\n     canLoad:[ValidarTokenGuard]\n},\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ClienteRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJudWV2by1jbGllbnRlLmNvbXBvbmVudC5jc3MifQ== */\";","export default \"<div class=\\\"main-content\\\">\\n    <div class=\\\"container-fluid\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-12\\\">\\n                <div class=\\\"card\\\">\\n\\n                    <div class=\\\"card-header card-header-danger\\\">\\n                        <h4 class=\\\"card-title\\\">Ingresar Usuarios</h4>\\n                        <p class=\\\"card-category\\\">Complete la informacion a continuacion</p>\\n                    </div>\\n\\n                    <div class=\\\"card-body\\\">\\n\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-5\\\">\\n                                <mat-form-field class=\\\"example-full-width\\\">\\n                                    <input matInput autocomplete=\\\"off\\\" minlength=\\\"10\\\" maxlength=\\\"10\\\"\\n                                       #txtcedula [(ngModel)]=\\\"cedula\\\" placeholder=\\\"CI/Ruc:\\\">\\n                                </mat-form-field>\\n                            </div>\\n\\n                            <div class=\\\"col-md-3\\\">\\n                                <mat-form-field class=\\\"example-full-width\\\">\\n                                    <input matInput autocomplete=\\\"off\\\" maxlength=\\\"60\\\" #txtnombres [(ngModel)]=\\\"nombres\\\" placeholder=\\\"Nombre:\\\">\\n                                </mat-form-field>\\n                            </div>\\n\\n                            <div class=\\\"col-md-3\\\">\\n                                <mat-form-field class=\\\"example-full-width\\\">\\n                                    <input matInput autocomplete=\\\"off\\\" #txtapellidos maxlength=\\\"60\\\"\\n                                        [(ngModel)]=\\\"apellidos\\\" placeholder=\\\"Apellido:\\\">\\n                                </mat-form-field>\\n                            </div>\\n\\n                            <div class=\\\"col-md-3\\\">\\n                                <mat-form-field class=\\\"example-full-width\\\">\\n                                    <input matInput autocomplete=\\\"off\\\" maxlength=\\\"120\\\" #txtdireccion\\n                                        [(ngModel)]=\\\"direccion\\\" placeholder=\\\"Direccion:\\\">\\n                                </mat-form-field>\\n                            </div>\\n\\n                            <div class=\\\"col-md-3\\\">\\n                                <mat-form-field class=\\\"example-full-width\\\">\\n                                    <input matInput autocomplete=\\\"off\\\" maxlength=\\\"15\\\" #txttelefono\\n                                        [(ngModel)]=\\\"telefono\\\" placeholder=\\\"Telefono:\\\">\\n                                </mat-form-field>\\n                            </div>\\n\\n                            <div class=\\\"col-md-4\\\">\\n                                <mat-form-field class=\\\"example-full-width\\\">\\n                                    <input matInput autocomplete=\\\"off\\\" maxlength=\\\"120\\\" #txtcorreo [(ngModel)]=\\\"correo\\\" placeholder=\\\"Email:\\\"\\n                                        type=\\\"email\\\">\\n                                </mat-form-field>\\n                            </div>\\n\\n                        </div>\\n                        <br>\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-4\\\">\\n                                <button mat-raised-button (click)=\\\"actualizarCliente()\\\"\\n                                    class=\\\"btn btn-danger pull-right\\\">GUARDAR</button>\\n                            </div>\\n\\n                            <br />\\n                            <br />\\n\\n                            <div class=\\\"col-md-4\\\">\\n                                <button mat-raised-button\\n                               \\n                                routerLink='/cliente/listar'\\n                                class=\\\"btn btn-primary pull-right\\\">\\n                                    Cancelar</button>\\n                            </div>\\n\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n        </div>\\n    </div>\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhY3R1YWxpemFyLWNsaWVudGUuY29tcG9uZW50LmNzcyJ9 */\";","export default \"<div class=\\\"main-content\\\">\\n    <div class=\\\"container-fluid\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-12\\\">\\n                <div class=\\\"card\\\">\\n\\n                    <div class=\\\"card-header card-header-danger\\\">\\n                        <h4 class=\\\"card-title\\\">Ingresar Usuarios</h4>\\n                        <p class=\\\"card-category\\\">Complete la informacion a continuacion</p>\\n                    </div>\\n\\n                    <div class=\\\"card-body\\\">\\n                        \\n                        <form autocomplete=\\\"off\\\" [formGroup]=\\\"miFormulario\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-md-5\\\">\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\n                                        <input matInput placeholder=\\\"CI/Ruc:\\\" maxlength=\\\"10\\\"\\n                                            formControlName='cedula'>\\n                                    </mat-form-field>\\n                                    <span class=\\\"form-text text-danger\\\"\\n                                    *ngIf=\\\"validarCedula('cedula')\\\">\\n                                    La Cedula es Invalida.\\n                                </span>\\n                                </div>\\n\\n                                <div class=\\\"col-md-3\\\">\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\n                                        <input matInput maxlength=\\\"60\\\" placeholder=\\\"Nombre:\\\"\\n                                        formControlName=\\\"nombres\\\">\\n                                    </mat-form-field>\\n                                    <span class=\\\"form-text text-danger\\\" *ngIf=\\\"campoNoValido('nombres')\\\">\\n                                        Campos Insuficientes\\n                                    </span>\\n                                </div>\\n\\n                                <div class=\\\"col-md-3\\\">\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\n                                        <input matInput maxlength=\\\"60\\\" placeholder=\\\"Apellido:\\\"\\n                                        formControlName=\\\"apellidos\\\">\\n                                    </mat-form-field>\\n                                    <span class=\\\"form-text text-danger\\\" *ngIf=\\\"campoNoValido('apellidos')\\\">\\n                                        Campos Insuficientes\\n                                    </span>\\n                                </div>\\n\\n                                <div class=\\\"col-md-3\\\">\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\n                                        <input matInput maxlength=\\\"120\\\" placeholder=\\\"Direccion:\\\"\\n                                        formControlName='direccion'>\\n                                    </mat-form-field>\\n                                    <span class=\\\"form-text text-danger\\\" *ngIf=\\\"campoNoValido('direccion')\\\">\\n                                        Campos Insuficientes\\n                                    </span>\\n                                </div>\\n\\n                                <div class=\\\"col-md-3\\\">\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\n                                        <input matInput maxlength=\\\"15\\\" placeholder=\\\"Telefono:\\\"\\n                                        formControlName='telefono'>\\n                                    </mat-form-field>\\n                                    <span class=\\\"form-text text-danger\\\" *ngIf=\\\"campoNoValido('telefono')\\\">\\n                                        Campos Insuficientes\\n                                    </span>\\n                                </div>\\n\\n                                <div class=\\\"col-md-4\\\">\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\n                                        <input matInput maxlength=\\\"120\\\" #txtcorreo placeholder=\\\"Email:\\\" type=\\\"email\\\"\\n                                        formControlName='correo'>\\n                                    </mat-form-field>\\n                                    <span class=\\\"form-text text-danger\\\" *ngIf=\\\"campoNoValido('correo')\\\">\\n                                        {{ emailErrorMsg }}\\n                                    </span>\\n                                </div>\\n\\n                            </div>\\n                        </form>\\n                        <br>\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-4\\\">\\n                                <button mat-raised-button (click)=\\\"crearCliente()\\\"\\n                                    class=\\\"btn btn-danger pull-right\\\">GUARDAR</button>\\n                            </div>\\n\\n                            <br />\\n                            <br />\\n\\n                            <div class=\\\"col-md-4\\\">\\n                                <button mat-raised-button (click)=\\\"cancelar()\\\"\\n                                    class=\\\"btn btn-primary pull-right\\\">\\n                                    Cancelar</button>\\n                            </div>\\n\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n        </div>\\n    </div>\\n</div>\";","import { Injectable } from '@angular/core';\nimport { CanActivate, CanLoad, Router } from '@angular/router';\nimport { map } from 'jquery';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AuthService } from '../service/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidarTokenGuard implements CanActivate, CanLoad {\n\n  constructor(private auth: AuthService,\n    private router: Router) { }\n\n  canActivate(): Observable<boolean> | boolean {\n    return true;\n    // return this.auth.validarToken()\n    //   .pipe(\n    //     tap(valido => {\n    //       if (!valido) {\n    //         this.router.navigateByUrl('/auth/login');\n    //       }\n    //     })\n    //   );\n  }\n  canLoad(): Observable<boolean> | boolean {\n   \n    return true;\n    // return this.auth.validarToken()\n    //   .pipe(\n    //     tap(valido => {\n    //       if (!valido) {\n    //         this.router.navigateByUrl('/auth/login');\n    //       }\n    //     })\n    //   );\n  }\n\n\n}\n"]}